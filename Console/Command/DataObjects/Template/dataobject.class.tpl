<?php

declare(strict_types=1);
{function defaultValues}
    {if $data->phpType === 'bool' || $data->dataType === 'tinyint'} false
    {elseif $data->phpType === 'int'} 0
    {elseif $data->phpType === 'string'} ''
    {elseif $data->phpType === 'float'} 0.00
    {else}''{/if}
{/function}
namespace JTL\ChangeMe;

use DateTime;
use JTL\DataObjects\AbstractDataObject;
use JTL\DataObjects\DataTableObjectInterface;

/**
 * Class {$modelName}
 * This class is generated by shopcli DTO:create
 *
 * @package JTL\DataObjects
 */
class {$modelName} extends AbstractDataObject implements DataTableObjectInterface
{
{foreach $tableDesc as $attribute}
    {if $attribute->isPrimaryKey == "true"}
private string $primaryKey = '{$attribute->name|strip}';
{else}
protected {if $attribute->phpType==="DateTime"}string{else}{$attribute->phpType}{/if} ${$mapping[$attribute->name]|default:$attribute->name|strip} = {capture name="code"}{strip}{defaultValues data = $attribute};{/strip}{/capture}{$smarty.capture.code|regex_replace:'/[\n\s]/':""}
{/if}
{/foreach}

    private array $mapping = [
    {foreach $tableDesc as $attribute}
        '{$mapping[$attribute->name]|default:$attribute->name|strip}' => '{$mapping[$attribute->name]|default:$attribute->name|strip}',
    {/foreach}
    ];

    private array $columnMapping = [
    {foreach $tableDesc as $attribute}
            '{$attribute->name|strip}' => '{$mapping[$attribute->name]|default:$attribute->name|strip}',
    {/foreach}
    ];

    public function getPrimaryKey(): string
    {
        return $this->primaryKey;
    }

    {foreach $tableDesc as $attribute}
public function get{$mapping[$attribute->name]|default:$attribute->name|capitalize}(): {$attribute->phpType}
    {
        return $this->{$mapping[$attribute->name]|default:$attribute->name};
    }

    public function set{$mapping[$attribute->name]|default:$attribute->name|capitalize}({$attribute->paramTypes} $value): self
    {
    {if $attribute->phpType!=="bool"}
    $this->{$mapping[$attribute->name]|default:$attribute->name} = {if $attribute->phpType!=="DateTime"}({$attribute->phpType}){/if}$value;
{else}
$this->{$mapping[$attribute->name]|default:$attribute->name} = $this->checkAndReturnBoolValue($value);
{/if}

        return $this;
    }

    {/foreach}


    /**
     * @return string[]
     */
    public function getMapping(): array
    {
        return \array_merge($this->mapping, $this->columnMapping);
    }

    /**
     * @return array
     */
    public function getReverseMapping(): array
    {
        return \array_flip($this->mapping);
    }

    /**
     * @return array
     */
    public function getColumnMapping(): array
    {
        return \array_flip($this->columnMapping);
    }
}
